
#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include <math.h>

void training();
void CosinKernel(float x, float y, int CenterR, int CenterC, float Centers[][121]);
void GaussianKernal(float x, float y, int CenterR, int CenterC, float Centers[][121]);
int main()
{
	
	float train[121][2];
	float trainOutput[121];
	float Centers[2][121] = { { -1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1,-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1,-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1,-1,-0.8,-0.600000000000000,-0.400000000000000,-0.200000000000000,0,0.200000000000000,0.400000000000000,0.600000000000000,0.800000000000000,1,-1,-0.800000000000000,-0.600000000000000,-0.400000000000000,-0.200000000000000,0,0.200000000000000,0.400000000000000,0.600000000000000,0.800000000000000,1,-1,-0.800000000000000,-0.600000000000000,-0.400000000000000,-0.200000000000000,0,0.200000000000000,0.400000000000000,0.600000000000000,0.800000000000000,1,-1,-0.800000000000000,-0.600000000000000,-0.400000000000000,-0.200000000000000,0,0.200000000000000,0.400000000000000,0.600000000000000,0.800000000000000,1,-1,-0.800000000000000,-0.600000000000000,-0.400000000000000,-0.200000000000000,0,0.200000000000000,0.400000000000000,0.600000000000000,0.800000000000000,1,-1,-0.800000000000000,-0.600000000000000,-0.400000000000000,-0.200000000000000,0,0.200000000000000,0.400000000000000,0.600000000000000,0.800000000000000,1,-1,-0.800000000000000,-0.600000000000000,-0.400000000000000,-0.200000000000000,0,0.200000000000000,0.400000000000000,0.600000000000000,0.800000000000000,1,-1,-0.800000000000000,-0.600000000000000,-0.400000000000000,-0.200000000000000,0,0.200000000000000,0.400000000000000,0.600000000000000,0.800000000000000,1 },
							  { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.6,-0.6,-0.6,-0.6,-0.6,-0.6,-0.6,-0.6,-0.6,-0.6,-0.6,-0.4,-0.4,-0.4,-0.400000000000000,-0.400000000000000,-0.400000000000000,-0.400000000000000,-0.400000000000000,-0.400000000000000,-0.400000000000000,-0.400000000000000,-0.200000000000000,-0.200000000000000,-0.200000000000000,-0.200000000000000,-0.200000000000000,-0.200000000000000,-0.200000000000000,-0.200000000000000,-0.200000000000000,-0.200000000000000,-0.200000000000000,0,0,0,0,0,0,0,0,0,0,0,0.200000000000000,0.200000000000000,0.200000000000000,0.200000000000000,0.200000000000000,0.200000000000000,0.200000000000000,0.200000000000000,0.200000000000000,0.200000000000000,0.200000000000000,0.400000000000000,0.400000000000000,0.400000000000000,0.400000000000000,0.400000000000000,0.400000000000000,0.400000000000000,0.400000000000000,0.400000000000000,0.400000000000000,0.400000000000000,0.600000000000000,0.600000000000000,0.600000000000000,0.600000000000000,0.600000000000000,0.600000000000000,0.600000000000000,0.600000000000000,0.600000000000000,0.600000000000000,0.600000000000000,0.800000000000000,0.800000000000000,0.800000000000000,0.800000000000000,0.800000000000000,0.800000000000000,0.800000000000000,0.800000000000000,0.800000000000000,0.800000000000000,0.800000000000000,1,1,1,1,1,1,1,1,1,1,1 } };
	float data[11];
	data[0] = -1.0;
	float alpha1 = 0.5;
	float alpha2 = 0.5;
	float outputNeuron = 1;
	float w[121];
	float b = 0.0;
	float learningRate = 0.001;
	int Epoch = 10000;
	for (int i = 0; i < 121; i++)
	{
		w[i] = 0.0;
	}
	for (int i = 1; i < 11; i++)
	{
		data[i] = data[i - 1] + 0.2;
		//printf("%f\n", data[i]);
	}
	int count = 0;
	for (int i = 0; i < 11; i++)
	{
		for (int j = 0; j < 11; j++)
		{
			train[count][0] = data[j];
			train[count][1] = data[i];
			trainOutput[count] = exp(-pow(train[count][0], 2) - train[count][1]);
			//printf("%.2f, %.2f %.2f\n", train[count][0], train[count][1], trainOutput[count]);
			count++;
		}
	}
	float error = 0.0;

	float temp = 0.0;
	
	CosinKernel(train[0][0],train[0][1], 2, 121, Centers);
	GaussianKernal(train[0][0], train[0][1], 2, 121, Centers);


	return 0;
}



void GaussianKernal(float x, float y,  int CenterR, int CenterC, float Centers[][121])
{
	float output[121];
	float sigma = 0.04;
	printf("Gauss Kernel\n\n\n");
	for (int i = 0; i < 121; i++)
	{
		output[i] = exp(-(pow((x - Centers[0][i]), 2) + pow((y - Centers[1][i]), 2))/0.04);
		printf("%f\n", output[i]);
	}

}
void CosinKernel(float x,float y, int CenterR, int CenterC,float Centers[][121])
{
	printf("Cosine Kernel\n");
	

	float output[121];
	float sumCenter[121];
	float intputsq=x*x +y*y;
	printf("\nMultiplication Kernel\n\n\n");
	
	for (int i = 0; i < 121; i++)
	{
		float sum = 0.0;
		sum = x * Centers[0][i]+ y * Centers[1][i];
		output[i] = sum;
		
		sumCenter[i] = sqrt((pow(Centers[0][i], 2) + pow(Centers[1][i], 2))*intputsq);
		output[i] = output[i] / sumCenter[i];
		printf("%f\n", output[i]);
	}
	
}